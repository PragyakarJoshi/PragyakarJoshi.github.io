{"version":3,"sources":["components/commons/Header/Header.jsx","components/Landing/index.jsx","components/Landing/Landing.jsx","components/PollForm/PollForm.jsx","components/PollForm/index.jsx","components/commons/NotFound/NotFound.jsx","components/Stats/Stats.jsx","components/Vote/Vote.jsx","components/Vote/index.jsx","Router.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Landing","commons_Header_Header","react_router_dom","to","PollForm","state","host","title","optionA","optionB","error","startPoll","_this$state","_this","setState","localStorage","setItem","props","history","push","updateFormState","e","clearErrorMessage","Object","defineProperty","target","name","value","_this2","this","type","id","placeholder","onChange","maxLength","onClick","React","Component","withRouter","NotFound","Stats","_props$data","data","optionAcount","optionBcount","parseInt","Vote","optionApercent","optionBpercent","activePollExists","addVoteLeft","updateVotes","console","log","addVoteRight","totalVotes","percentA","percentB","Math","round","endPoll","clear","getItem","gridSizes","display","gridTemplateColumns","_this$state2","activePoll","Fragment","style","components_Stats_Stats","commons_NotFound_NotFound","Router","basename","process","react_router","exact","path","component","App","src_Router","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yOAYeA,EAVA,kBACbC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,OAAhB,OACAH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,QAAhB,QAEFH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,sBCPWC,ECGC,kBACdJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACG,EAAD,MACAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACbH,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,OAAOJ,UAAU,WAA1B,mECJAK,6MAEJC,MAAQ,CACNC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,QAAS,GACTC,MAAO,MAGTC,UAAY,WAAM,IAAAC,EACyBC,EAAKR,MAAtCC,EADQM,EACRN,KAAMC,EADEK,EACFL,MAAOC,EADLI,EACKJ,QAASC,EADdG,EACcH,QAChB,KAATH,GAAyB,KAAVC,GAA4B,KAAZC,GAA8B,KAAZC,EACpDI,EAAKC,SAAU,CACbJ,MAAO,oCAGTK,aAAaC,QAAQ,OAAQV,GAC7BS,aAAaC,QAAQ,QAAST,GAC9BQ,aAAaC,QAAQ,UAAWR,GAChCO,aAAaC,QAAQ,eAAgB,GACrCD,aAAaC,QAAQ,UAAWP,GAChCM,aAAaC,QAAQ,eAAgB,GACrCH,EAAKI,MAAMC,QAAQC,KAAK,aAI5BC,gBAAkB,SAACC,GACjBR,EAAKS,oBACLT,EAAKC,SAALS,OAAAC,EAAA,EAAAD,CAAA,GACGF,EAAEI,OAAOC,KAAOL,EAAEI,OAAOE,WAI9BL,kBAAoB,WAClBT,EAAKC,SAAU,CACbJ,MAAO,8EAKF,IAAAkB,EAAAC,KACP,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACG,EAAD,MACAL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,OAAOJ,KAAK,OAAOK,GAAG,OAAOhC,UAAU,aAAaiC,YAAY,YAAYC,SAAU,SAAAZ,GAAC,OAAIO,EAAKR,gBAAgBC,MAC5HzB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,OAAOJ,KAAK,QAAQK,GAAG,eAAehC,UAAU,aAAaiC,YAAY,aAAaC,SAAU,SAAAZ,GAAC,OAAIO,EAAKR,gBAAgBC,MACtIzB,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,OAAOJ,KAAK,UAAUK,GAAG,UAAUhC,UAAU,aAAaiC,YAAY,WAAWE,UAAU,KAAKD,SAAU,SAAAZ,GAAC,OAAIO,EAAKR,gBAAgBC,MAChJzB,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,SAAOgC,KAAK,OAAOJ,KAAK,UAAUK,GAAG,UAAUhC,UAAU,aAAaiC,YAAY,WAAWE,UAAU,KAAKD,SAAU,SAAAZ,GAAC,OAAIO,EAAKR,gBAAgBC,MAChJzB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAa8B,KAAKxB,MAAMK,OACxCd,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAYoC,QAASN,KAAKlB,WAAvC,0BAxDWyB,IAAMC,WCHdjC,EDmEAkC,YAAWlC,GEzDXmC,EARE,kBACf3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAMC,GAAG,OAAOJ,UAAU,WAA1B,sBCQWyC,EAbD,SAAAvB,GAAS,IAAAwB,EACkCxB,EAAMyB,KAAtDlC,EADciC,EACdjC,QAASmC,EADKF,EACLE,aAAclC,EADTgC,EACShC,QAASmC,EADlBH,EACkBG,aACvC,OACEhD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,YAAOU,EAAP,KAAkBmC,GAClB/C,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,YAAOW,EAAP,KAAkBmC,GAClBhD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,mCAA4B+C,SAASF,GAAgB,GAAME,SAASD,GAAgB,MCLpFE,6MACJzC,MAAQ,CACNC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,QAAS,GACTkC,aAAc,EACdC,aAAc,EACdG,eAAgB,GAChBC,eAAgB,MAelBC,iBAAmB,WAAM,IAAArC,EACmBC,EAAKR,MAAvCC,EADeM,EACfN,KAAMC,EADSK,EACTL,MAAOC,EADEI,EACFJ,QAASC,EADPG,EACOH,QAC9B,MAAa,KAATH,GAAwB,OAATA,GAA2B,KAAVC,GAA0B,OAAVA,GAA8B,KAAZC,GAA8B,OAAZA,GAAgC,KAAZC,GAA8B,OAAZA,KAOhIyC,YAAc,WACZrC,EAAKC,SAAS,CACZ6B,aAAcE,SAAShC,EAAKR,MAAMsC,cAAgB,GACjD,kBAAM9B,EAAKsC,gBACdC,QAAQC,IAAI,mBAGdC,aAAe,WACbzC,EAAKC,SAAS,CACZ8B,aAAcC,SAAShC,EAAKR,MAAMuC,cAAgB,GACjD,kBAAM/B,EAAKsC,gBACdC,QAAQC,IAAI,oBAGdF,YAAc,WACZ,IAAII,EAAaV,SAAShC,EAAKR,MAAMsC,cAAgBE,SAAShC,EAAKR,MAAMuC,cACrEY,EAAYX,SAAShC,EAAKR,MAAMsC,cAAgBY,EAAc,IAC9DE,EAAYZ,SAAShC,EAAKR,MAAMuC,cAAgBW,EAAc,IAClE1C,EAAKC,SAAS,CACZiC,eAAgBW,KAAKC,MAAMH,GAC3BR,eAAgBU,KAAKC,MAAMF,KAE7B1C,aAAaC,QAAQ,eAAgBH,EAAKR,MAAMsC,cAChD5B,aAAaC,QAAQ,eAAgBH,EAAKR,MAAMuC,cAChDQ,QAAQC,IAAIxC,EAAKR,MAAM0C,eAAgBlC,EAAKR,MAAM2C,mBAGpDY,QAAU,WACR7C,aAAa8C,QACbhD,EAAKI,MAAMC,QAAQC,KAAK,4FAlDN,IAAAS,EAAAC,KAClBA,KAAKf,SAAS,CACZR,KAAMS,aAAa+C,QAAQ,QAC3BvD,MAAOQ,aAAa+C,QAAQ,SAC5BtD,QAASO,aAAa+C,QAAQ,WAC9BrD,QAASM,aAAa+C,QAAQ,WAC9BnB,aAAcE,SAAS9B,aAAa+C,QAAQ,iBAAmB,EAC/DlB,aAAcC,SAAS9B,aAAa+C,QAAQ,iBAAmB,GAC9D,kBAAMlC,EAAKuB,gBACdC,QAAQC,IAAIxB,KAAKxB,wCA6CjB,IAAI0D,EAAY,CACdC,QAAS,OACTC,oBACEpC,KAAKxB,MAAM0C,eAAiB,IAAMlB,KAAKxB,MAAM2C,eAAiB,KAJ3DkB,EAaHrC,KAAKxB,MANPC,EAPK4D,EAOL5D,KACAC,EARK2D,EAQL3D,MACAC,EATK0D,EASL1D,QACAuC,EAVKmB,EAULnB,eACAtC,EAXKyD,EAWLzD,QACAuC,EAZKkB,EAYLlB,eAEImB,EAAatC,KAAKoB,mBAGxB,OAFAG,QAAQC,IAAIc,GACZf,QAAQC,IAAIxB,KAAKxB,OAEfT,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACZoE,EACCvE,EAAAC,EAAAC,cAACF,EAAAC,EAAMuE,SAAP,KACExE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAcQ,GAC5BX,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,mCACAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAasE,MAAON,GACjCnE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUoC,QAASN,KAAKqB,aACrCtD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAegD,EAA/B,KACAnD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBS,IAElCZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUoC,QAASN,KAAKyB,cACrC1D,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeiD,EAA/B,KACApD,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBU,KAGpCb,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,cAAwCO,IAE1CV,EAAAC,EAAAC,cAACwE,EAAD,CAAO5B,KAAMb,KAAKxB,QAClBT,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAUoC,QAASN,KAAK+B,SAA1C,aAGFhE,EAAAC,EAAAC,cAACyE,EAAD,cAzGSnC,IAAMC,WCJVS,EDoHAR,YAAWQ,GEvGX0B,EARA,kBACb5E,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAeuE,SAAUC,WACvB9E,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAMH,WAA8BI,UAAW9E,IAC5DJ,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAOE,KAAMH,cAAiCI,UAAW1E,IACzDR,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAOE,KAAMH,eAAkCI,UAAWhC,MCA/CiC,SANH,kBACVnF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkF,EAAD,SCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3F,EAAAC,EAAAC,cAAC0F,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1a18f479.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => (\n  <div className=\"header\">\n    <p className=\"logo\">\n      <span className=\"blu\">Ver</span>\n      <span className=\"purp\">sus</span>\n    </p>\n    <p className=\"subtitle\">Voting made easy</p>\n  </div>\n);\n\nexport default Header;","import Landing from './Landing';\nexport default Landing;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Header from '../commons/Header/Header';\n\nconst Landing = () => (\n  <div className=\"main-container\">\n    <Header />        \n    <div className=\"landing-container\">\n      <Link to='/ask' className=\"btn-ask\">\n        Start new poll\n      </Link>\n    </div>\n  </div>\n)\n\nexport default Landing;","import React from 'react';\nimport Header from '../commons/Header/Header';  \nimport { withRouter } from 'react-router-dom';\n\nclass PollForm extends React.Component {\n\n  state = {\n    host: '',\n    title: '',\n    optionA: '',\n    optionB: '',\n    error: ''\n  }\n\n  startPoll = () => {\n    const { host, title, optionA, optionB} = this.state;\n    if ( host === '' || title === '' || optionA === '' || optionB === '') {\n      this.setState ({\n        error: 'Please fill out all the fields'\n      });\n    } else {\n      localStorage.setItem(\"host\", host);\n      localStorage.setItem(\"title\", title);\n      localStorage.setItem(\"optionA\", optionA);\n      localStorage.setItem(\"optionAcount\", 0);\n      localStorage.setItem(\"optionB\", optionB);\n      localStorage.setItem(\"optionBcount\", 0);\n      this.props.history.push('/vote');\n    }\n  }\n\n  updateFormState = (e) => {\n    this.clearErrorMessage();\n    this.setState ({\n      [e.target.name]: e.target.value\n    })\n  }\n\n  clearErrorMessage = () => {\n    this.setState ({\n      error: ''\n    })\n  }\n\n\n  render() {\n    return (\n      <div className=\"main-container\">\n        <Header />  \n        <div className=\"polls-container\">\n          <br />\n          <form>\n            <input type=\"text\" name=\"host\" id=\"host\" className=\"form-input\" placeholder=\"Host Name\" onChange={e => this.updateFormState(e)} />\n            <hr />\n            <input type=\"text\" name=\"title\" id=\"survey-title\" className=\"form-input\" placeholder=\"Poll Title\" onChange={e => this.updateFormState(e)} />\n            <br /><br />\n            <input type=\"text\" name=\"optionA\" id=\"optionA\" className=\"form-input\" placeholder=\"Option A\" maxLength=\"15\" onChange={e => this.updateFormState(e)} />\n            <br /><br />\n            <input type=\"text\" name=\"optionB\" id=\"optionB\" className=\"form-input\" placeholder=\"Option B\" maxLength=\"15\" onChange={e => this.updateFormState(e)} />\n            <span className=\"error-msg\">{this.state.error}</span>\n            <p className=\"btn-start\" onClick={this.startPoll}> Start poll </p>\n          </form>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default withRouter(PollForm);\n","import PollForm from './PollForm';\nexport default PollForm;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = () => (\n  <div className=\"not-found\">\n    <p>There are no active polls currently.</p>\n    <br />\n    <Link to='/ask' className=\"btn-ask\">Start a new Poll</Link>\n  </div>\n)\n\nexport default NotFound;","import React from 'react';\n\nconst Stats = props => {\n  const {optionA, optionAcount, optionB, optionBcount} = props.data;\n  return(\n    <div className=\"stats-container\">\n      <span>{optionA}: {optionAcount}</span>\n      <br />\n      <span>{optionB}: {optionBcount}</span>\n      <br />\n      <span>Total Votes casted: {(parseInt(optionAcount) - 1) + (parseInt(optionBcount) - 1)}</span>\n    </div>\n  )\n}\n\nexport default Stats;","import React from \"react\";\nimport { withRouter} from 'react-router-dom';\nimport NotFound from \"../commons/NotFound/NotFound\";\nimport Stats from \"../Stats/Stats\";\n\nclass Vote extends React.Component {\n  state = {\n    host: \"\",\n    title: \"\",\n    optionA: \"\",\n    optionB: \"\",\n    optionAcount: 0,\n    optionBcount: 0,\n    optionApercent: 50,\n    optionBpercent: 50\n  };\n\n  componentDidMount() {\n    this.setState({\n      host: localStorage.getItem(\"host\"),\n      title: localStorage.getItem(\"title\"),\n      optionA: localStorage.getItem(\"optionA\"),\n      optionB: localStorage.getItem(\"optionB\"),\n      optionAcount: parseInt(localStorage.getItem(\"optionAcount\")) + 1,\n      optionBcount: parseInt(localStorage.getItem(\"optionBcount\")) + 1\n    }, () => this.updateVotes());\n    console.log(this.state);\n  }\n\n  activePollExists = () => {\n    const { host, title, optionA, optionB } = this.state;\n    if (host === \"\" || host === null || title === \"\" || title === null || optionA === \"\" || optionA === null || optionB === \"\" || optionB === null) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  addVoteLeft = () => {\n    this.setState({\n      optionAcount: parseInt(this.state.optionAcount) + 1\n    }, () => this.updateVotes());\n    console.log('clicked left');\n  };\n\n  addVoteRight = () => {\n    this.setState({\n      optionBcount: parseInt(this.state.optionBcount) + 1\n    }, () => this.updateVotes());\n    console.log('clicked right');\n  };\n\n  updateVotes = () => {\n    var totalVotes = parseInt(this.state.optionAcount) + parseInt(this.state.optionBcount);\n    var percentA = (parseInt(this.state.optionAcount) / totalVotes) * 100;\n    var percentB = (parseInt(this.state.optionBcount) / totalVotes) * 100;\n    this.setState({\n      optionApercent: Math.round(percentA),\n      optionBpercent: Math.round(percentB)\n    });\n    localStorage.setItem(\"optionAcount\", this.state.optionAcount);\n    localStorage.setItem(\"optionBcount\", this.state.optionBcount);\n    console.log(this.state.optionApercent, this.state.optionBpercent);\n  };\n  \n  endPoll = () => {\n    localStorage.clear();\n    this.props.history.push('/ask');\n  }\n\n  render() {\n    var gridSizes = {\n      display: \"grid\",\n      gridTemplateColumns:\n        this.state.optionApercent + \"%\" + this.state.optionBpercent + \"%\"\n    };\n    const {\n      host,\n      title,\n      optionA,\n      optionApercent,\n      optionB,\n      optionBpercent\n    } = this.state;\n    const activePoll = this.activePollExists();\n    console.log(activePoll);\n    console.log(this.state);\n    return (\n      <div className=\"main-container-lg\">\n        {activePoll ? (\n          <React.Fragment>\n            <div className=\"vote-container\">\n              <h1 className=\"poll-title\">{title}</h1>\n              <p className=\"poll-info\">(Click on desired side to vote)</p>\n              <div className=\"voting-box\" style={gridSizes}>\n                <div className=\"optionA\" onClick={this.addVoteLeft}>\n                  <span className=\"option-size\">{optionApercent}%</span>\n                  <span className=\"option-title\">{optionA}</span>\n                </div>\n                <div className=\"optionB\" onClick={this.addVoteRight}>\n                  <span className=\"option-size\">{optionBpercent}%</span>\n                  <span className=\"option-title\">{optionB}</span>\n                </div>\n              </div>\n              <span className=\"host-name\">Hosted by: {host}</span>\n            </div>\n            <Stats data={this.state}/>\n            <button className=\"btn-end\" onClick={this.endPoll}>End Poll</button>\n          </React.Fragment>\n        ) : (\n          <NotFound />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Vote);\n","import Vote from './Vote';\nexport default Vote;","import React from 'react';\nimport { BrowserRouter, Route, } from 'react-router-dom';\nimport Landing from './components/Landing';\nimport PollForm from './components/PollForm';\nimport Vote from './components/Vote';\n\nconst Router = () => (\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Route exact path={process.env.PUBLIC_URL + '/'} component={Landing} />\n    <Route path={process.env.PUBLIC_URL + '/ask'} component={PollForm} />\n    <Route path={process.env.PUBLIC_URL + '/vote'} component={Vote} /> \n  </BrowserRouter>\n)\n\nexport default Router;","import React from 'react';\nimport Router from './Router';\nimport './App.css';\n\nconst App = () => (    \n  <div className=\"App\">\n    <Router />      \n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}